---
description: Apply these rules when making changes to the project
globs:
alwaysApply: true
---

Update this rule if user requested changes to the project requirement, etc.
## Project Overview

*   **Type:** Multi-Page Website
*   **Description:** A website to showcase the Obzervable platform, highlighting enterprise data strategies, domain-driven design, data mesh architecture, and advanced observability features to attract developers, architects, and CTOs. The site mirrors Rudderstack's intuitive navigation (Products, Solutions, Integrations, Docs, Resources, Pricing) and adapts Obzervable's messaging accordingly.
*   **Primary Goal:** Build a multi-page website to showcase the Obzervable platform and attract developers, architects, and CTOs.

## Project Structure

### Framework-Specific Routing

*   **Directory Rules:**

    *   **Next.js 14 (App Router):** Enforce the use of the `app/` directory with nested route folders following the `app/[route]/page.tsx` conventions.
    *   Example 1: "Next.js 14 (App Router)" → `app/[route]/page.tsx` conventions
    *   Example 2: "Next.js (Pages Router)" → `pages/[route].tsx` pattern (not applicable here)
    *   Example 3: "React Router 6" → `src/routes/` with `createBrowserRouter`

### Core Directories

*   **Versioned Structure:**

    *   **app/**: Holds page directories corresponding to major sections like Products, Solutions, Integrations, Docs, Resources, Pricing with appropriate routing.
    *   Example 1: `app/docs` → Developer documentation hub
    *   Example 2: `app/integrations` → Pages showcasing compatible systems

### Key Files

*   **Stack-Versioned Patterns:**

    *   **app/(home)/page.tsx**: Next.js 14 root landing page implementation
    *   **app/products/page.tsx**: Page to showcase product offerings
    *   **app/solutions/page.tsx**: Page detailing solutions by use case or industry
    *   **app/integrations/page.tsx**: Page listing integrations
    *   **app/docs/page.tsx**: Developer documentation hub page
    *   **app/resources/page.tsx**: Page for resources like blog, case studies
    *   **app/pricing/page.tsx**: Page detailing pricing information

## Tech Stack Rules

*   **Version Enforcement:**

    *   **next@14:** App Router must be used; legacy patterns such as `getInitialProps` are not allowed.
    *   **AWS Amplify:** Implement backend & hosting following AWS best practices for security, performance, and scalability.
    *   **rstreams:** Leverage open-source platform guidelines for data streaming and integration.

## PRD Compliance

*   **Non-Negotiable:**

    *   "Mirror Rudderstack's Site Structure" - The website's navigation and structure must emulate Rudderstack's intuitive design.
    *   "Adapt Existing Obzervable Messaging" - Core messages must be tailored to highlight enterprise data strategies, real-time event streaming, AI integration, and overall data observability.

## App Flow Integration

*   **Stack-Aligned Flow:**

    *   The user journey starts at the Home page (`app/(home)/page.tsx`), proceeds to Products (`app/products/page.tsx`), Solutions (`app/solutions/page.tsx`), Docs (`app/docs/page.tsx`), and other informational pages (Integrations, Resources, Pricing), ensuring seamless transitions and clear calls-to-action (e.g., external sign-up links for registration).

## Best Practices

*   **Next.js**

    *   Utilize the App Router for optimal server/client component integration.
    *   Follow file-based routing conventions with clear, nested directory structures.
    *   Leverage Server Components where appropriate to improve performance and SEO, especially for AI-first optimization.

*   **AWS Amplify**

    *   Adhere to security best practices and regular audits to protect backend resources.
    *   Follow deployment and scaling guidelines provided by AWS Amplify to ensure high availability.
    *   Integrate AWS monitoring tools to track performance and uptime.

*   **rstreams**

    *   Utilize best practices for real-time data streaming to ensure data integrity and low-latency communications.
    *   Integrate seamlessly with Next.js to provide robust data flow capabilities.
    *   Maintain clear documentation and modular designs for ease of future updates.

## Rules

*   Derive folder/file patterns **directly** from the tech stack document versions.
*   If Next.js 14 App Router: Enforce the `app/` directory with nested route folders.
*   If Pages Router (not applicable here): Use `pages/*.tsx` flat structure.
*   Mirror this logic for React Router, SvelteKit, etc.
*   Never mix version patterns (e.g., no `pages/` in App Router projects).

## Rules Metrics

Before starting the project development, create a metrics file in the root of the project called `cursor_metrics.md`.

### Instructions:

*   Each time a cursor rule is used as context, update `cursor_metrics.md`.
*   Use the following format for `cursor_metrics.md:`

    # Rules Metrics

    ## Usage
    The number of times each rule is used as context

    *   rule-name.mdc: 5
    *   another-rule.mdc: 2
    *   ...other rules
